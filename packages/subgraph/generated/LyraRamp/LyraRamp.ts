// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class FeeCollected extends ethereum.Event {
  get params(): FeeCollected__Params {
    return new FeeCollected__Params(this);
  }
}

export class FeeCollected__Params {
  _event: FeeCollected;

  constructor(event: FeeCollected) {
    this._event = event;
  }

  get paymentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get feeAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PaymentCompleted extends ethereum.Event {
  get params(): PaymentCompleted__Params {
    return new PaymentCompleted__Params(this);
  }
}

export class PaymentCompleted__Params {
  _event: PaymentCompleted;

  constructor(event: PaymentCompleted) {
    this._event = event;
  }

  get paymentId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get sender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get currency(): string {
    return this._event.parameters[4].value.toString();
  }

  get stablecoinAmount(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get sourceChain(): string {
    return this._event.parameters[6].value.toString();
  }

  get targetChain(): string {
    return this._event.parameters[7].value.toString();
  }

  get stablecoinToken(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class StablecoinAdded extends ethereum.Event {
  get params(): StablecoinAdded__Params {
    return new StablecoinAdded__Params(this);
  }
}

export class StablecoinAdded__Params {
  _event: StablecoinAdded;

  constructor(event: StablecoinAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StablecoinRemoved extends ethereum.Event {
  get params(): StablecoinRemoved__Params {
    return new StablecoinRemoved__Params(this);
  }
}

export class StablecoinRemoved__Params {
  _event: StablecoinRemoved;

  constructor(event: StablecoinRemoved) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class LyraRamp__getPaymentResultValue0Struct extends ethereum.Tuple {
  get recipient(): Address {
    return this[0].toAddress();
  }

  get currency(): string {
    return this[1].toString();
  }

  get recipientName(): string {
    return this[2].toString();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get stablecoinAmount(): BigInt {
    return this[4].toBigInt();
  }

  get paymentId(): BigInt {
    return this[5].toBigInt();
  }

  get isCompleted(): boolean {
    return this[6].toBoolean();
  }

  get timestamp(): BigInt {
    return this[7].toBigInt();
  }

  get sourceChain(): string {
    return this[8].toString();
  }

  get targetChain(): string {
    return this[9].toString();
  }

  get sender(): Address {
    return this[10].toAddress();
  }

  get stablecoinToken(): Address {
    return this[11].toAddress();
  }
}

export class LyraRamp__paymentsResult {
  value0: Address;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: boolean;
  value7: BigInt;
  value8: string;
  value9: string;
  value10: Address;
  value11: Address;

  constructor(
    value0: Address,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: boolean,
    value7: BigInt,
    value8: string,
    value9: string,
    value10: Address,
    value11: Address,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
    this.value10 = value10;
    this.value11 = value11;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set("value8", ethereum.Value.fromString(this.value8));
    map.set("value9", ethereum.Value.fromString(this.value9));
    map.set("value10", ethereum.Value.fromAddress(this.value10));
    map.set("value11", ethereum.Value.fromAddress(this.value11));
    return map;
  }

  getRecipient(): Address {
    return this.value0;
  }

  getCurrency(): string {
    return this.value1;
  }

  getRecipientName(): string {
    return this.value2;
  }

  getAmount(): BigInt {
    return this.value3;
  }

  getStablecoinAmount(): BigInt {
    return this.value4;
  }

  getPaymentId(): BigInt {
    return this.value5;
  }

  getIsCompleted(): boolean {
    return this.value6;
  }

  getTimestamp(): BigInt {
    return this.value7;
  }

  getSourceChain(): string {
    return this.value8;
  }

  getTargetChain(): string {
    return this.value9;
  }

  getSender(): Address {
    return this.value10;
  }

  getStablecoinToken(): Address {
    return this.value11;
  }
}

export class LyraRamp extends ethereum.SmartContract {
  static bind(address: Address): LyraRamp {
    return new LyraRamp("LyraRamp", address);
  }

  feePercentage(): BigInt {
    let result = super.call("feePercentage", "feePercentage():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePercentage(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feePercentage",
      "feePercentage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPayment(_paymentId: BigInt): LyraRamp__getPaymentResultValue0Struct {
    let result = super.call(
      "getPayment",
      "getPayment(uint256):((address,string,string,uint256,uint256,uint256,bool,uint256,string,string,address,address))",
      [ethereum.Value.fromUnsignedBigInt(_paymentId)],
    );

    return changetype<LyraRamp__getPaymentResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getPayment(
    _paymentId: BigInt,
  ): ethereum.CallResult<LyraRamp__getPaymentResultValue0Struct> {
    let result = super.tryCall(
      "getPayment",
      "getPayment(uint256):((address,string,string,uint256,uint256,uint256,bool,uint256,string,string,address,address))",
      [ethereum.Value.fromUnsignedBigInt(_paymentId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<LyraRamp__getPaymentResultValue0Struct>(value[0].toTuple()),
    );
  }

  getUserPayments(_user: Address): Array<BigInt> {
    let result = super.call(
      "getUserPayments",
      "getUserPayments(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );

    return result[0].toBigIntArray();
  }

  try_getUserPayments(_user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getUserPayments",
      "getUserPayments(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isStablecoinSupported(_token: Address): boolean {
    let result = super.call(
      "isStablecoinSupported",
      "isStablecoinSupported(address):(bool)",
      [ethereum.Value.fromAddress(_token)],
    );

    return result[0].toBoolean();
  }

  try_isStablecoinSupported(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isStablecoinSupported",
      "isStablecoinSupported(address):(bool)",
      [ethereum.Value.fromAddress(_token)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paymentCounter(): BigInt {
    let result = super.call("paymentCounter", "paymentCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_paymentCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paymentCounter",
      "paymentCounter():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  payments(param0: BigInt): LyraRamp__paymentsResult {
    let result = super.call(
      "payments",
      "payments(uint256):(address,string,string,uint256,uint256,uint256,bool,uint256,string,string,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new LyraRamp__paymentsResult(
      result[0].toAddress(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBoolean(),
      result[7].toBigInt(),
      result[8].toString(),
      result[9].toString(),
      result[10].toAddress(),
      result[11].toAddress(),
    );
  }

  try_payments(param0: BigInt): ethereum.CallResult<LyraRamp__paymentsResult> {
    let result = super.tryCall(
      "payments",
      "payments(uint256):(address,string,string,uint256,uint256,uint256,bool,uint256,string,string,address,address)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LyraRamp__paymentsResult(
        value[0].toAddress(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBoolean(),
        value[7].toBigInt(),
        value[8].toString(),
        value[9].toString(),
        value[10].toAddress(),
        value[11].toAddress(),
      ),
    );
  }

  supportedStablecoins(param0: Address): boolean {
    let result = super.call(
      "supportedStablecoins",
      "supportedStablecoins(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_supportedStablecoins(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportedStablecoins",
      "supportedStablecoins(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  userPayments(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userPayments",
      "userPayments(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toBigInt();
  }

  try_userPayments(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userPayments",
      "userPayments(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddSupportedStablecoinCall extends ethereum.Call {
  get inputs(): AddSupportedStablecoinCall__Inputs {
    return new AddSupportedStablecoinCall__Inputs(this);
  }

  get outputs(): AddSupportedStablecoinCall__Outputs {
    return new AddSupportedStablecoinCall__Outputs(this);
  }
}

export class AddSupportedStablecoinCall__Inputs {
  _call: AddSupportedStablecoinCall;

  constructor(call: AddSupportedStablecoinCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddSupportedStablecoinCall__Outputs {
  _call: AddSupportedStablecoinCall;

  constructor(call: AddSupportedStablecoinCall) {
    this._call = call;
  }
}

export class CompletePaymentCall extends ethereum.Call {
  get inputs(): CompletePaymentCall__Inputs {
    return new CompletePaymentCall__Inputs(this);
  }

  get outputs(): CompletePaymentCall__Outputs {
    return new CompletePaymentCall__Outputs(this);
  }
}

export class CompletePaymentCall__Inputs {
  _call: CompletePaymentCall;

  constructor(call: CompletePaymentCall) {
    this._call = call;
  }

  get _recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _currency(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _recipientName(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _stablecoinAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _sourceChain(): string {
    return this._call.inputValues[5].value.toString();
  }

  get _targetChain(): string {
    return this._call.inputValues[6].value.toString();
  }

  get _stablecoinToken(): Address {
    return this._call.inputValues[7].value.toAddress();
  }
}

export class CompletePaymentCall__Outputs {
  _call: CompletePaymentCall;

  constructor(call: CompletePaymentCall) {
    this._call = call;
  }
}

export class RemoveSupportedStablecoinCall extends ethereum.Call {
  get inputs(): RemoveSupportedStablecoinCall__Inputs {
    return new RemoveSupportedStablecoinCall__Inputs(this);
  }

  get outputs(): RemoveSupportedStablecoinCall__Outputs {
    return new RemoveSupportedStablecoinCall__Outputs(this);
  }
}

export class RemoveSupportedStablecoinCall__Inputs {
  _call: RemoveSupportedStablecoinCall;

  constructor(call: RemoveSupportedStablecoinCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveSupportedStablecoinCall__Outputs {
  _call: RemoveSupportedStablecoinCall;

  constructor(call: RemoveSupportedStablecoinCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFeePercentageCall extends ethereum.Call {
  get inputs(): UpdateFeePercentageCall__Inputs {
    return new UpdateFeePercentageCall__Inputs(this);
  }

  get outputs(): UpdateFeePercentageCall__Outputs {
    return new UpdateFeePercentageCall__Outputs(this);
  }
}

export class UpdateFeePercentageCall__Inputs {
  _call: UpdateFeePercentageCall;

  constructor(call: UpdateFeePercentageCall) {
    this._call = call;
  }

  get _newFeePercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFeePercentageCall__Outputs {
  _call: UpdateFeePercentageCall;

  constructor(call: UpdateFeePercentageCall) {
    this._call = call;
  }
}
